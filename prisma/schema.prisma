// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organizations OrganizationUser[]
  projects      ProjectUser[]
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                 String         @id @default(cuid())
  name               String
  description        String?
  requirements       Requirement[]
  organization       Organization?   @relation(fields: [organizationId], references: [id])
  organizationId     String?
  users              ProjectUser[]
  contributors       ProjectContributor[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model ProjectUser {
  id                  String            @id @default(cuid())
  project             Project?          @relation(fields: [projectId], references: [id])
  projectId           String?
  user                User?             @relation(fields: [userId], references: [id])
  userId              String?
  assignedAt          DateTime          @default(now())
  assignedBy          String?
}

model ProjectContributor {
  id                  String            @id @default(cuid())
  project             Project?          @relation(fields: [projectId], references: [id])
  projectId           String?
  contributor         Contributor?      @relation(fields: [contributorId], references: [id])
  contributorId       String?

}


model Requirement {
  id            String    @id @default(cuid())
  name          String
  description   String?
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     String
  stage         String
  priority      String
  workItems     WorkItem[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model WorkItem {
  id              String        @id @default(cuid())
  name            String
  requirement     Requirement?  @relation(fields: [requirementId], references: [id])
  requirementId   String?
  hoursEstimated  Float?
  hoursSpent      Float?
  completed       Boolean       @default(false)
}

model Contributor {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  projects      ProjectContributor[]
}

model Organization {
  id            String    @id @default(cuid())
  name          String
  users         OrganizationUser[]
  projects      Project[]
}

model OrganizationUser {
  id                  String            @id @default(cuid())
  organization        Organization?     @relation(fields: [organizationId], references: [id])
  organizationId      String?
  user                User?             @relation(fields: [userId], references: [id])
  userId              String?
  assignedAt          DateTime          @default(now())
  assignedBy          String?
}

